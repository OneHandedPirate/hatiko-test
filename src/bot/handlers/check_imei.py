import asyncio


import aiohttp
from aiogram import Router, F
from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from src.bot.utils import delete_message, Keyboards, validate_imei, bot_logger
from src.core.config import settings


router = Router()


class ImeiCheckStates(StatesGroup):
    waiting_for_imei = State()


@router.callback_query(F.data == "check_imei")
async def check_imei_enter(callback_query: types.CallbackQuery, state: FSMContext):
    asyncio.create_task(delete_message(callback_query.message))

    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä IMEI", reply_markup=Keyboards.get_back_to_main_kbd()
    )

    await state.set_state(ImeiCheckStates.waiting_for_imei)


@router.message(F.text, ImeiCheckStates.waiting_for_imei)
async def input_imei(message: types.Message, state: FSMContext):
    asyncio.create_task(delete_message(message))

    if not validate_imei(message.text):
        await message.answer(
            "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π IMEI\n"
            "IMEI –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=Keyboards.get_back_to_main_kbd(),
        )
        return

    new_message = await message.answer("–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...")

    try:
        async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=10)
        ) as aiohttp_session:
            body = {"imei": message.text, "token": settings.api.token}

            res = await aiohttp_session.post(
                f"{settings.api.protocol}://{settings.api.host}:{settings.api.port}/api/check-imei",
                json=body,
            )

            json_response = await res.json()

            if res.status == 400:
                await new_message.edit_text(
                    json_response.get("detail"),
                    reply_markup=Keyboards.get_after_check_kbd(),
                )
                await state.clear()
                return

            if res.status != 200:
                raise Exception("Invalid API response")


            await new_message.edit_text(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                f"üì± –ú–æ–¥–µ–ª—å: {json_response.get('properties')['deviceName']}\n"
                f"üåè –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {json_response.get('properties')['purchaseCountry']}",
                reply_markup=Keyboards.get_after_check_kbd(),
            )

            await state.clear()
    except Exception as e:
        bot_logger.exception(
            "Exception occurred while fetching IMEI data: %s", str(e), exc_info=True
        )
        await new_message.edit_text(
            "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ IMEI –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "
            "–Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=Keyboards.get_back_to_main_kbd(),
        )
